enum32 T_id
{
#    SERVER_DEBUG 2000

    #Server Commands
    register_connection 161
    team_list 115
    heart_beat 108
    send_chat 141
    server_info 106
    kick 150
    syncchecksum_response 31
    syncchecksum 30

    #Client Commands
    preregister_connection 160
    heart_beat_response 109
    add_chat 140
    player_info 110
    disconnect 111
    accept_start_game 112
    accept_button_game 20

    #Game Commands
    ADD_GAMECOMMAND 20
    tick 10
    SYNC 35
    start_game 120
    PASSWD_ERROR 113
#TODO: 163
#TODO: 151
#TODO: 152
#TODO: 117
#TODO: 118
#TODO: 170
}

struct T_header
{
    byte_order big_endian;
    uint32 size_after_header;
    T_id msg_id;
}

struct T_register_connection
{
    T_header header;
    int16 length_server_id;
    string(length_server_id) server_id;
    int32 protocol_version;
    int32 game_version;
    int32 another_game_version;
    int16 length_pkg_name;
    string(length_pkg_name) pkg_name;
    int16 length_server_uuid;
    string(length_server_uuid) server_uuid;
    int32 server_key;
}

struct T_team_list
{
    T_header header;
    int32 player_position;
    int8 is_game_started;
    int32 max_players;
    int16 length_gzip_head;
    string(length_gzip_head) gzip_head;
    int32 length_gzip_blob;
    raw(length_gzip_blob) gzip_blob; #TODO
    int32 fog_of_war;
    int32 credits;
    int8 unknown_flag; #TODO
    int32 ai_difficulty;
    int8 unknown_byte;
    int32 unit_limit;
    int32 another_unit_limit;
    int32 starting_units;
    float32 income;
    int8 is_no_nuke;
    int8 unknown_byte_2; #TODO
    int8 unknown_byte_3; #TODO
    int8 is_shared_control;
    int8 is_suspended;
}

struct T_heart_beat
{
    T_header header;
    int64 payload;
    int8 end_byte;
}

struct T_server_info
{    
    T_header header;
    int16 length_package_name;
    string(length_package_name) package_name;
    int32 game_version;
    int32 map_type;
    int16 length_map_name;
    string(length_map_name) map_name;
    int32 credits;
    int32 fog_of_war;
    int8 unknown_flag; #TODO
    int32 unknown_int; #TODO
    int8 unknown_byte; #TODO
    int8 unknown_flag_2; #TODO
    int8 is_admin;
    int32 unit_limit;
    int32 another_unit_limit;
    int32 starting_units;
    float32 income;
    int8 is_no_nuke;
    int8 unknown_flag_3; #TODO
    int8 have_unit_data;
    if (have_unit_data == 1)
    {
        int16 length_gzip_head;
        string(length_gzip_head) gzip_head;
        int32 length_gzip_blob;
        raw(length_gzip_blob) gzip_blob; #TODO
    }
    int8 is_shared_control; #TODO
    int8 unknown_flag_4; #TODO
    int8 unknown_flag_5; #TODO
    int8 unknown_flag_6; #allow audience TODO
    int8 unknown_flag_7; #TODO
}

struct T_preregister_connection
{
    T_header header;
    int16 length_package_name;
    string(length_package_name) package_name;
    int32 protocol_version;
    int32 game_version;
    int32 another_game_version;
    int8 length_relay_id; #TODO: maybe flag
    string(length_relay_id) relay_id;
    int16 length_nickname;
    string(length_nickname) nickname;
    int16 length_locale;
    string(length_locale) locale;
    int16 length_steam_misc;
    string(length_locale) steam_misc;
}

struct T_player_info
{
    T_header header;
    int16 length_package_name;
    string(length_package_name) package_name;
    int32 protocol_version;
    int32 game_version;
    int32 another_game_version;
    int16 length_nickname;
    string(length_nickname) nickname;
    int8 have_password;
    if (have_password == 1)
    {
        int16 length_password;
        string(length_password) password;
    }
    int16 length_another_package_name;
    string(length_another_package_name) another_package_name;
    int16 length_uuid_sum;
    string(length_uuid_sum) uuid_sum;
    int32 magic_value;
    int16 length_token;
    string(length_token) token;
}

struct T_kick
{
    T_header header;
    int16 length_message;
    string(length_message) message;
}

struct T_heart_beat_response
{
    T_header header;
    int64 payload;
    int8 unknown_byte;
    int8 unknown_byte_2;
}

struct T_add_chat
{
    T_header header;
    int16 length_message;
    string(length_message) message;    
    int8 unknown_byte;
}

struct T_send_chat
{
    T_header header;
    int16 length_message;
    string(length_message) message;    
    int8 protocol_version;
    int8 unknown_flag;
    int16 length_author;
    string(length_author) author;   
    int32 team_1;
    int32 team_2;
}

struct T_disconnect
{
    T_header header;
    int16 length_message;
    string(length_message) message;
}

struct T_accept_start_game
{
    T_header header;
    int16 flag;
}

struct T_start_game
{
    T_header header;
    int8 flag;
    int32 map_type;
    if (map_type == 0)
    {
        int16 length_vanilla_map_name;
        string(length_vanilla_map_name) vanilla_map_name;
    } 
    else
    {
        int32 map_lenght;
        string(map_lenght) map;
        int16 length_custom_map_name;
        string(length_custom_map_name) custom_map_name;
    }
    int8 flag_2;
}

struct T_tick
{
    T_header header;
    int32 timestamp;
    int32 flag;
    raw(*) the_end;
}

struct T_syncchecksum_response
{
    T_header header;
    raw(*) the_end;
}

struct T_syncchecksum
{
    T_header header;
    raw(*) the_end;
}

struct T_accept_button_game
{
    T_header header;
    raw(*) the_end;
}

switch T_id_switch T_id
{
    case T_id::register_connection : T_register_connection "";
    case T_id::team_list : T_team_list "";
    case T_id::heart_beat : T_heart_beat "";
    case T_id::server_info : T_server_info "";
    case T_id::kick : T_kick "";
    case T_id::preregister_connection : T_preregister_connection "";
    case T_id::player_info : T_player_info "";
    case T_id::disconnect : T_disconnect "";
    case T_id::heart_beat_response : T_heart_beat_response "";
    case T_id::add_chat : T_add_chat "";
    case T_id::send_chat : T_send_chat "";
    case T_id::accept_start_game : T_accept_start_game "";
    case T_id::start_game : T_start_game "";
    case T_id::tick : T_tick "";
    case T_id::syncchecksum_response : T_syncchecksum_response "";
    case T_id::syncchecksum : T_syncchecksum "";
    case T_id::accept_button_game : T_accept_button_game "";
} 
