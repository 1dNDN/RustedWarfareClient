enum32 T_my_msg_id
{
#    PACKET_SERVER_DEBUG 2000

    #Server Commands
    packet_register_connection_msg_id 161
    packet_team_list_msg_id 115
    packet_heart_beat_msg_id 108
#    PACKET_SEND_CHAT 141
    packet_server_info_msg_id 106
#    PACKET_KICK 150
#    PACKET_SYNCCHECKSUM_STATUS 31
#    PACKET_A 30

    #Client Commands
    packet_preregister_connection_msg_id 160
    packet_heart_beat_response_msg_id 109
#    PACKET_ADD_CHAT 140
    packet_player_info_msg_id 110
    packet_disconnect_msg_id 111
#    PACKET_ACCEPT_START_GAME 112
#    PACKET_ACCEPT_BUTTON_GAME 20

    #Game Commands
#    PACKET_ADD_GAMECOMMAND 20
#    PACKET_TICK 10
#    PACKET_SYNC 35
#    PACKET_START_GAME 120
#    PACKET_PASSWD_ERROR 113
#TODO: 163
#TODO: 151
#TODO: 152
#TODO: 117
#TODO: 118
#TODO: 170
}

struct T_my_msg_header
{
    byte_order big_endian ;
    uint32 size_after_header ;
    T_my_msg_id msg_id ;
}

struct T_packet_register_connection_msg_id
{
    T_my_msg_header header ;
    int16 length_server_id ;
    string(length_server_id) server_id ;
    int32 protocol_version ;
    int32 game_version ;
    int32 another_game_version ;
    int16 length_pkg_name ;
    string(length_pkg_name) pkg_name ;
    int16 length_server_uuid ;
    string(length_server_uuid) server_uuid ;
    int32 server_key ;
}

struct T_packet_team_list_msg_id
{
    T_my_msg_header header ;
    int32 player_position ;
    int8 is_game_started ;
    int32 max_players ;
    int16 length_gzip_head ;
    string(length_gzip_head) gzip_head ;
    int32 length_gzip_blob ;
    raw(length_gzip_blob) gzip_blob ;
    int32 fog_of_war ;
    int32 credits ;
    int8 unknown_flag ; #TODO
    int32 ai_difficulty ;
    int8 unknown_byte ;
    int32 unit_limit ;
    int32 another_unit_limit ;
    int32 starting_units ;
    float32 income ;
    int8 is_no_nuke ;
    int8 unknown_byte_2 ; #TODO
    int8 unknown_byte_3 ; #TODO
    int8 is_shared_control ;
    int8 is_suspended ;
}

struct T_packet_heart_beat_msg_id
{
    T_my_msg_header header ;
}

struct T_packet_server_info_msg_id
{    
    T_my_msg_header header ;
    int16 length_package_name ;
    string(length_package_name) package_name ;
    int32 game_net_version ;
    int32 map_type ;
    int16 length_map_name ;
    string(length_map_name) map_name ;
    int32 credits ;
    int32 fog_of_war ;
    int8 unknown_flag ; #TODO
    int32 unknown_int ; #TODO
    int8 unknown_byte ; #TODO
    int8 unknown_flag_2 ; #TODO
    int8 is_admin ;
    int32 unit_limit ;
    int32 another_unit_limit ;
    int32 starting_units ;
    float32 income ;
    int8 is_no_nuke ;
    int8 unknown_flag_3 ; #TODO
    int8 have_unit_data ;
    if (have_unit_data == 1)
    {
        int16 length_gzip_head ;
        string(length_gzip_head) gzip_head ;
        int32 length_gzip_blob ;
        raw(length_gzip_blob) gzip_blob ;
    }
    int8 is_shared_control ; #TODO
    int8 unknown_flag_4 ; #TODO
    int8 unknown_flag_5 ; #TODO
    int8 unknown_flag_6 ; #allow audience TODO
    int8 unknown_flag_7 ; #TODO
}

struct T_packet_preregister_connection_msg_id
{
    T_my_msg_header header ;
    int16 length_package_name ;
    string(length_package_name) package_name ;
    int32 protocol_version ;
    int32 game_version ;
    int32 another_game_version ;
    int8 length_relay_id ; #TODO: maybe flag
    string(length_relay_id) relay_id ;
    int16 length_nickname ;
    string(length_nickname) nickname ;
}

struct T_packet_player_info_msg_id
{
    T_my_msg_header header ;
    int16 length_package_name ;
    string(length_package_name) package_name ;
    int32 protocol_version ;
    int32 game_version ;
    int32 another_game_version ;
    int16 length_nickname ;
    string(length_nickname) nickname ;
    int8 have_password ;
    if (have_password == 1)
    {
        int16 length_password;
        string(length_password) password;
    }
    int16 length_another_package_name ;
    string(length_another_package_name) another_package_name ;
    int16 length_uuid_sum ;
    string(length_server_uuid) server_uuid ;
    int32 magic_value ;
    int16 length_token ;
    string(length_token) token ;
}

struct T_packet_c_msg_id
{
    T_my_msg_header header ;
}

struct T_packet_heart_beat_response_msg_id
{
    T_my_msg_header header ;
}

struct T_packet_disconnect_msg_id
{
    T_my_msg_header header ;
}

switch T_my_msg_switch T_my_msg_id
{
    case T_my_msg_id::packet_register_connection_msg_id : T_packet_register_connection_msg_id "" ;
    case T_my_msg_id::packet_team_list_msg_id : T_packet_team_list_msg_id "" ;
    case T_my_msg_id::packet_heart_beat_msg_id : T_packet_heart_beat_msg_id "" ;
    case T_my_msg_id::packet_server_info_msg_id : T_packet_server_info_msg_id "" ;
    case T_my_msg_id::packet_preregister_connection_msg_id : T_packet_preregister_connection_msg_id "" ;
    case T_my_msg_id::packet_player_info_msg_id : T_packet_player_info_msg_id "" ;
    case T_my_msg_id::packet_disconnect_msg_id : T_packet_disconnect_msg_id "" ;
    case T_my_msg_id::packet_heart_beat_response_msg_id : T_packet_heart_beat_response_msg_id "" ;
} 